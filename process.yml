# Orb 'circleci/node@4.0.1' resolved to 'circleci/node@4.0.1'
# Orb 'circleci/heroku@1.2.2' resolved to 'circleci/heroku@1.2.2'
# Orb 'circleci/aws-s3@2.0.0' resolved to 'circleci/aws-s3@2.0.0'
# Orb 'circleci/browser-tools@1.0.1' resolved to 'circleci/browser-tools@1.0.1'
version: 2
jobs:
  publish-storybook:
    docker:
    - image: cimg/node:lts
    resource_class: small
    steps:
    - attach_workspace:
        at: workspace
    - run:
        name: Only proceed if we have a Storybook app to update
        command: |
          export HEROKU_RELEASE_STORYBOOK_APP_NAME=$(cat workspace/heroku-release-storybook-app-name.txt)
          if [[ ${HEROKU_RELEASE_STORYBOOK_APP_NAME} == "false" ]]; then
          circleci step halt
          fi
    - run:
        name: Set environment variables
        command: |
          echo 'export PR_NUMBER=$(cat workspace/gh-pr-num.txt)' >> $BASH_ENV
          echo 'export APPLITOOLS_BATCH_ID=${CIRCLE_SHA1}' >> $BASH_ENV
          echo 'export APPLITOOLS_BATCH_NAME="PR #${PR_NUMBER} (${CIRCLE_USERNAME})"' >> $BASH_ENV
          echo 'export APPLITOOLS_DONT_CLOSE_BATCHES="true"' >> $BASH_ENV
          echo 'export APPLITOOLS_BATCH_NOTIFY="true"' >> $BASH_ENV
          echo 'export REVIEW_APP_NAME=slds-storybook-pr-${PR_NUMBER}' >> $BASH_ENV
    - run:
        command: |
          if [[ $(command -v heroku) == "" ]]; then
            curl https://cli-assets.heroku.com/install.sh | sh
          else
            echo "Heroku is already installed. No operation was performed."
          fi
        name: Install Heroku CLI (If not installed)
    - run:
        name: Install Heroku Build CLI plugin
        command: heroku plugins:install heroku-builds
    - run:
        name: Deploy to Heroku
        command: |
          export HEROKU_RELEASE_STORYBOOK_APP_NAME=$(cat workspace/heroku-release-storybook-app-name.txt)
          if [[ ${HEROKU_RELEASE_STORYBOOK_APP_NAME} != "false" &&  ${PR_NUMBER} == "" ]]; then
          export PUBLISH_STORYBOOK_TO=${HEROKU_RELEASE_STORYBOOK_APP_NAME}
          else
          export PUBLISH_STORYBOOK_TO=${REVIEW_APP_NAME}
          fi
          echo "=============================="
          echo ${PUBLISH_STORYBOOK_TO}
          echo "=============================="
          heroku buildpacks -a ${PUBLISH_STORYBOOK_TO} | grep "https://github.com/salesforce-ux/heroku-buildpack-nginx.git#dse" || heroku buildpacks:set https://github.com/salesforce-ux/heroku-buildpack-nginx.git#dse -a ${PUBLISH_STORYBOOK_TO}
          heroku builds:create --source-tar workspace/storybook.tar.gz -a ${PUBLISH_STORYBOOK_TO}
    - run:
        name: Install Github CLI
        command: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          sudo apt-add-repository https://cli.github.com/packages
          sudo apt update
          sudo apt install gh
    - run:
        name: Set Github deployments to "success"
        command: |
          for row in $(jq -r '.[] | select(.url | contains("storybook")) | @base64' workspace/gh-deployments.json); do
            export STATUS_URL=$(echo ${row} | base64 --decode | jq -r ".status" | sed 's/https:\/\/api.github.com//')
            export SITE_URL=$(echo ${row} | base64 --decode | jq -r ".url")
            gh api ${STATUS_URL} -f state=success -f environment_url=${SITE_URL} -H "Accept: application/vnd.github.ant-man-preview+json"
          done
  vrt-mobile:
    docker:
    - image: cimg/node:lts
    resource_class: large
    steps:
    - checkout
    - attach_workspace:
        at: workspace
    - run:
        name: Set environment variables
        command: |
          echo 'export PR_NUMBER=$(cat workspace/gh-pr-num.txt)' >> $BASH_ENV
          echo 'export APPLITOOLS_BATCH_ID=${CIRCLE_SHA1}' >> $BASH_ENV
          echo 'export APPLITOOLS_BATCH_NAME="PR #${PR_NUMBER} (${CIRCLE_USERNAME})"' >> $BASH_ENV
          echo 'export APPLITOOLS_DONT_CLOSE_BATCHES="true"' >> $BASH_ENV
          echo 'export APPLITOOLS_BATCH_NOTIFY="true"' >> $BASH_ENV
          echo 'export REVIEW_APP_NAME=slds-storybook-pr-${PR_NUMBER}' >> $BASH_ENV
    - run:
        name: Add Applitools eyes-storybook module
        command: npm i @applitools/eyes-storybook@latest --save-dev --package-lock-only
    - run:
        command: |
          if [ ! -f "package.json" ]; then
            echo
            echo "---"
            echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
            echo "---"
            echo
            echo "Current directory: $(pwd)"
            echo
            echo
            echo "List directory: "
            echo
            ls
            exit 1
          fi
        name: Checking for package.json.
        working_directory: ~/project
    - restore_cache:
        keys:
        - node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
    - run:
        command: "if [[ ! -z \"\" ]]; then\n  echo \"Running override package installation command:\"\n  \nelse\n  npm ci\nfi\n"
        name: Installing NPM packages
        working_directory: ~/project
    - save_cache:
        key: node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
        paths:
        - ~/.npm
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          # installation check
          if uname -a | grep Darwin > /dev/null 2>&1; then
            if ls /Applications | grep "Google Chrome" > /dev/null 2>&1; then

              echo "$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)is already installed"

              exit 0
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
            if command -v chromium-browser > /dev/null 2>&1; then

              echo "$(chromium-browser --version)is already installed to $(which chromium-browser)"

              exit 0

            else
              echo "Google Chrome (via Chromium) is not currently installed; installing it"
            fi
          elif command -v yum > /dev/null 2>&1; then
            if command -v google-chrome > /dev/null 2>&1; then
              echo "$(google-chrome --version)is already installed to $(which google-chrome)"

              exit 0
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          else
            if command -v google-chrome > /dev/null 2>&1; then

              echo "$(google-chrome --version)is already installed to $(which google-chrome)"

              exit 0
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          fi

          # install chrome
          if uname -a | grep Darwin > /dev/null 2>&1; then
            brew update > /dev/null 2>&1 && \
              HOMEBREW_NO_AUTO_UPDATE=1 brew cask install google-chrome > /dev/null 2>&1

            echo -e "#\!/bin/bash\n" > google-chrome
            perl -i -pe "s|#\\\|#|g" google-chrome
            echo -e "/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome \"\$@\"" >> google-chrome

            $SUDO mv google-chrome /usr/local/bin
            $SUDO chmod +x /usr/local/bin/google-chrome

            # test/verify installation
            if google-chrome --version > /dev/null 2>&1; then
              echo "$(google-chrome --version)has been installed in the /Applications directory"
              echo "A shortcut has also been created at $(which google-chrome)"
              exit 0
            else
              echo "Something went wrong; Google Chrome could not be installed"
              exit 1
            fi
          elif command -v yum > /dev/null 2>&1; then
            # download chrome
            curl --silent --show-error --location --fail --retry 3 \
              --output google-chrome-stable_current_x86_64.rpm \
              https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm

            curl --silent --show-error --location --fail --retry 3 \
              --output liberation-fonts.rpm \
              http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm

            $SUDO yum localinstall -y liberation-fonts.rpm \
              > /dev/null 2>&1

            $SUDO yum localinstall -y google-chrome-stable_current_x86_64.rpm \
              > /dev/null 2>&1

            rm -rf google-chrome-stable_current_x86_64.rpm liberation-fonts.rpm
          else
            # download chrome
            curl --silent --show-error --location --fail --retry 3 \
              --output google-chrome-stable_current_amd64.deb \
              https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

            $SUDO apt-get update \
            > /dev/null 2>&1 && \
            $SUDO apt-get install -y \
              apt-utils \
              fonts-liberation \
              libappindicator3-1 \
              libasound2 \
              libatk-bridge2.0-0 \
              libatk1.0-0 \
              libatspi2.0-0 \
              libcairo2 \
              libcups2 \
              libdbus-1-3 \
              libgbm1 \
              libgdk-pixbuf2.0-0 \
              libglib2.0-0 \
              libgtk-3-0 \
              libnspr4 \
              libnss3 \
              libpango-1.0-0 \
              libpangocairo-1.0-0 \
              libxcomposite1 \
              libxcursor1 \
              libxi6 \
              libxrandr2 \
              libxrender1 \
              libxss1 \
              libxtst6 \
              lsb-release \
              xdg-utils \
              > /dev/null 2>&1

            # setup chrome installation
            $SUDO dpkg -i \
              google-chrome-stable_current_amd64.deb \
              > /dev/null 2>&1

            rm -rf google-chrome-stable_current_amd64.deb
          fi

          # test/verify installation
          if google-chrome --version > /dev/null 2>&1; then
            echo "$(google-chrome --version) has been installed to $(which google-chrome)"
          else
            echo "Something went wrong; Google Chrome could not be installed"
            exit 1
          fi
        name: Install Google Chrome
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
          # determine_chrome_version
          if uname -a | grep Darwin> /dev/null 2>&1; then
            echo "System detected as MacOS"
            CHROME_VERSION="$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)"
            PLATFORM=mac64

          elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
            apk update > /dev/null 2>&1 && \
              apk add --no-cache chromium-chromedriver > /dev/null

            # verify version
            echo "$(chromedriver --version) has been installed to $(which chromedriver)"

            exit 0
          else
            CHROME_VERSION="$(google-chrome --version)"
            PLATFORM=linux64
          fi

          CHROME_VERSION_STRING="$(echo $CHROME_VERSION | sed 's/^Google Chrome //' | sed 's/^Chromium //')"

          # print Chrome version
          echo "Installed version of Google Chrome is $CHROME_VERSION_STRING"

          # determine chromedriver release
          CHROMEDRIVER_RELEASE="${CHROME_VERSION_STRING%%.*}"

          let CHROME_RELEASE=$CHROMEDRIVER_RELEASE

          if [[ $CHROME_RELEASE -lt 70 ]]; then
            # https://sites.google.com/a/chromium.org/chromedriver/downloads
            # https://chromedriver.storage.googleapis.com/2.40/notes.txt

            case $CHROME_RELEASE in
            69)
              CHROMEDRIVER_VERSION="2.44";;
            68)
              CHROMEDRIVER_VERSION="2.42";;
            67)
              CHROMEDRIVER_VERSION="2.41";;
            66)
              CHROMEDRIVER_VERSION="2.40";;
            65)
              CHROMEDRIVER_VERSION="2.38";;
            64)
              CHROMEDRIVER_VERSION="2.37";;
            63)
              CHROMEDRIVER_VERSION="2.36";;
            62)
              CHROMEDRIVER_VERSION="2.35";;
            61)
              CHROMEDRIVER_VERSION="2.34";;
            60)
              CHROMEDRIVER_VERSION="2.33";;
            59)
              CHROMEDRIVER_VERSION="2.32";;
            58)
              CHROMEDRIVER_VERSION="2.31";;
            [56-57])
              CHROMEDRIVER_VERSION="2.29";;
            55)
              CHROMEDRIVER_VERSION="2.28";;
            54)
              CHROMEDRIVER_VERSION="2.27";;
            53)
              CHROMEDRIVER_VERSION="2.26";;
            52)
              CHROMEDRIVER_VERSION="2.24";;
            51)
              CHROMEDRIVER_VERSION="2.23";;
            [49-50])
              CHROMEDRIVER_VERSION="2.22";;
            [46-48])
              CHROMEDRIVER_VERSION="2.21";;
            [43-45])
              CHROMEDRIVER_VERSION="2.20";;
            *)
              echo "Sorry, Google Chrome/Chromium version 43 or newer is required to use ChromeDriver"
              exit 1;;
            esac
          else
            CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 3 \
              "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROMEDRIVER_RELEASE")
          fi

          # installation check
          if command -v chromedriver > /dev/null 2>&1; then
            if chromedriver --version | grep "$CHROMEDRIVER_VERSION" > /dev/null 2>&1; then
              echo "ChromeDriver $CHROMEDRIVER_VERSION is already installed"
              exit 0
            else
              echo "A different version of ChromeDriver is installed ($(chromedriver --version)); removing it"
              $SUDO rm -f $(command -v chromedriver)
            fi
          fi

          echo "ChromeDriver $CHROMEDRIVER_VERSION will be installed"

          # download chromedriver
          curl --silent --show-error --location --fail --retry 3 \
            --output chromedriver_$PLATFORM.zip \
            "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_$PLATFORM.zip"

          # setup chromedriver installation
          if command -v yum > /dev/null 2>&1; then
            yum install -y unzip > /dev/null 2>&1
          fi

          unzip "chromedriver_$PLATFORM.zip" > /dev/null 2>&1
          rm -rf "chromedriver_$PLATFORM.zip"

          $SUDO mv chromedriver /usr/local/bin
          $SUDO chmod +x /usr/local/bin/chromedriver

          # test/verify version
          if chromedriver --version | grep "$CHROMEDRIVER_VERSION" > /dev/null 2>&1; then
            echo "$(chromedriver --version) has been installed to $(which chromedriver)"
          else
            echo "Something went wrong; ChromeDriver could not be installed"
            exit 1
          fi
        name: Install ChromeDriver
    - run:
        name: Prepare Storybook
        command: npm run storybook:prepare
    - run:
        name: Applitools (mobile)
        command: STORYBOOK_STORIES_TYPE=mobile npx eyes-storybook --conf applitools.mobile.config.js
        no_output_timeout: 20m
  vrt-desktop:
    docker:
    - image: cimg/node:lts
    resource_class: large
    steps:
    - checkout
    - attach_workspace:
        at: workspace
    - run:
        name: Set environment variables
        command: |
          echo 'export PR_NUMBER=$(cat workspace/gh-pr-num.txt)' >> $BASH_ENV
          echo 'export APPLITOOLS_BATCH_ID=${CIRCLE_SHA1}' >> $BASH_ENV
          echo 'export APPLITOOLS_BATCH_NAME="PR #${PR_NUMBER} (${CIRCLE_USERNAME})"' >> $BASH_ENV
          echo 'export APPLITOOLS_DONT_CLOSE_BATCHES="true"' >> $BASH_ENV
          echo 'export APPLITOOLS_BATCH_NOTIFY="true"' >> $BASH_ENV
          echo 'export REVIEW_APP_NAME=slds-storybook-pr-${PR_NUMBER}' >> $BASH_ENV
    - run:
        name: Add Applitools eyes-storybook module
        command: npm i @applitools/eyes-storybook@latest --save-dev --package-lock-only
    - run:
        command: |
          if [ ! -f "package.json" ]; then
            echo
            echo "---"
            echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
            echo "---"
            echo
            echo "Current directory: $(pwd)"
            echo
            echo
            echo "List directory: "
            echo
            ls
            exit 1
          fi
        name: Checking for package.json.
        working_directory: ~/project
    - restore_cache:
        keys:
        - node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
    - run:
        command: "if [[ ! -z \"\" ]]; then\n  echo \"Running override package installation command:\"\n  \nelse\n  npm ci\nfi\n"
        name: Installing NPM packages
        working_directory: ~/project
    - save_cache:
        key: node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
        paths:
        - ~/.npm
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          # installation check
          if uname -a | grep Darwin > /dev/null 2>&1; then
            if ls /Applications | grep "Google Chrome" > /dev/null 2>&1; then

              echo "$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)is already installed"

              exit 0
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
            if command -v chromium-browser > /dev/null 2>&1; then

              echo "$(chromium-browser --version)is already installed to $(which chromium-browser)"

              exit 0

            else
              echo "Google Chrome (via Chromium) is not currently installed; installing it"
            fi
          elif command -v yum > /dev/null 2>&1; then
            if command -v google-chrome > /dev/null 2>&1; then
              echo "$(google-chrome --version)is already installed to $(which google-chrome)"

              exit 0
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          else
            if command -v google-chrome > /dev/null 2>&1; then

              echo "$(google-chrome --version)is already installed to $(which google-chrome)"

              exit 0
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          fi

          # install chrome
          if uname -a | grep Darwin > /dev/null 2>&1; then
            brew update > /dev/null 2>&1 && \
              HOMEBREW_NO_AUTO_UPDATE=1 brew cask install google-chrome > /dev/null 2>&1

            echo -e "#\!/bin/bash\n" > google-chrome
            perl -i -pe "s|#\\\|#|g" google-chrome
            echo -e "/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome \"\$@\"" >> google-chrome

            $SUDO mv google-chrome /usr/local/bin
            $SUDO chmod +x /usr/local/bin/google-chrome

            # test/verify installation
            if google-chrome --version > /dev/null 2>&1; then
              echo "$(google-chrome --version)has been installed in the /Applications directory"
              echo "A shortcut has also been created at $(which google-chrome)"
              exit 0
            else
              echo "Something went wrong; Google Chrome could not be installed"
              exit 1
            fi
          elif command -v yum > /dev/null 2>&1; then
            # download chrome
            curl --silent --show-error --location --fail --retry 3 \
              --output google-chrome-stable_current_x86_64.rpm \
              https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm

            curl --silent --show-error --location --fail --retry 3 \
              --output liberation-fonts.rpm \
              http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm

            $SUDO yum localinstall -y liberation-fonts.rpm \
              > /dev/null 2>&1

            $SUDO yum localinstall -y google-chrome-stable_current_x86_64.rpm \
              > /dev/null 2>&1

            rm -rf google-chrome-stable_current_x86_64.rpm liberation-fonts.rpm
          else
            # download chrome
            curl --silent --show-error --location --fail --retry 3 \
              --output google-chrome-stable_current_amd64.deb \
              https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

            $SUDO apt-get update \
            > /dev/null 2>&1 && \
            $SUDO apt-get install -y \
              apt-utils \
              fonts-liberation \
              libappindicator3-1 \
              libasound2 \
              libatk-bridge2.0-0 \
              libatk1.0-0 \
              libatspi2.0-0 \
              libcairo2 \
              libcups2 \
              libdbus-1-3 \
              libgbm1 \
              libgdk-pixbuf2.0-0 \
              libglib2.0-0 \
              libgtk-3-0 \
              libnspr4 \
              libnss3 \
              libpango-1.0-0 \
              libpangocairo-1.0-0 \
              libxcomposite1 \
              libxcursor1 \
              libxi6 \
              libxrandr2 \
              libxrender1 \
              libxss1 \
              libxtst6 \
              lsb-release \
              xdg-utils \
              > /dev/null 2>&1

            # setup chrome installation
            $SUDO dpkg -i \
              google-chrome-stable_current_amd64.deb \
              > /dev/null 2>&1

            rm -rf google-chrome-stable_current_amd64.deb
          fi

          # test/verify installation
          if google-chrome --version > /dev/null 2>&1; then
            echo "$(google-chrome --version) has been installed to $(which google-chrome)"
          else
            echo "Something went wrong; Google Chrome could not be installed"
            exit 1
          fi
        name: Install Google Chrome
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
          # determine_chrome_version
          if uname -a | grep Darwin> /dev/null 2>&1; then
            echo "System detected as MacOS"
            CHROME_VERSION="$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)"
            PLATFORM=mac64

          elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
            apk update > /dev/null 2>&1 && \
              apk add --no-cache chromium-chromedriver > /dev/null

            # verify version
            echo "$(chromedriver --version) has been installed to $(which chromedriver)"

            exit 0
          else
            CHROME_VERSION="$(google-chrome --version)"
            PLATFORM=linux64
          fi

          CHROME_VERSION_STRING="$(echo $CHROME_VERSION | sed 's/^Google Chrome //' | sed 's/^Chromium //')"

          # print Chrome version
          echo "Installed version of Google Chrome is $CHROME_VERSION_STRING"

          # determine chromedriver release
          CHROMEDRIVER_RELEASE="${CHROME_VERSION_STRING%%.*}"

          let CHROME_RELEASE=$CHROMEDRIVER_RELEASE

          if [[ $CHROME_RELEASE -lt 70 ]]; then
            # https://sites.google.com/a/chromium.org/chromedriver/downloads
            # https://chromedriver.storage.googleapis.com/2.40/notes.txt

            case $CHROME_RELEASE in
            69)
              CHROMEDRIVER_VERSION="2.44";;
            68)
              CHROMEDRIVER_VERSION="2.42";;
            67)
              CHROMEDRIVER_VERSION="2.41";;
            66)
              CHROMEDRIVER_VERSION="2.40";;
            65)
              CHROMEDRIVER_VERSION="2.38";;
            64)
              CHROMEDRIVER_VERSION="2.37";;
            63)
              CHROMEDRIVER_VERSION="2.36";;
            62)
              CHROMEDRIVER_VERSION="2.35";;
            61)
              CHROMEDRIVER_VERSION="2.34";;
            60)
              CHROMEDRIVER_VERSION="2.33";;
            59)
              CHROMEDRIVER_VERSION="2.32";;
            58)
              CHROMEDRIVER_VERSION="2.31";;
            [56-57])
              CHROMEDRIVER_VERSION="2.29";;
            55)
              CHROMEDRIVER_VERSION="2.28";;
            54)
              CHROMEDRIVER_VERSION="2.27";;
            53)
              CHROMEDRIVER_VERSION="2.26";;
            52)
              CHROMEDRIVER_VERSION="2.24";;
            51)
              CHROMEDRIVER_VERSION="2.23";;
            [49-50])
              CHROMEDRIVER_VERSION="2.22";;
            [46-48])
              CHROMEDRIVER_VERSION="2.21";;
            [43-45])
              CHROMEDRIVER_VERSION="2.20";;
            *)
              echo "Sorry, Google Chrome/Chromium version 43 or newer is required to use ChromeDriver"
              exit 1;;
            esac
          else
            CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 3 \
              "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROMEDRIVER_RELEASE")
          fi

          # installation check
          if command -v chromedriver > /dev/null 2>&1; then
            if chromedriver --version | grep "$CHROMEDRIVER_VERSION" > /dev/null 2>&1; then
              echo "ChromeDriver $CHROMEDRIVER_VERSION is already installed"
              exit 0
            else
              echo "A different version of ChromeDriver is installed ($(chromedriver --version)); removing it"
              $SUDO rm -f $(command -v chromedriver)
            fi
          fi

          echo "ChromeDriver $CHROMEDRIVER_VERSION will be installed"

          # download chromedriver
          curl --silent --show-error --location --fail --retry 3 \
            --output chromedriver_$PLATFORM.zip \
            "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_$PLATFORM.zip"

          # setup chromedriver installation
          if command -v yum > /dev/null 2>&1; then
            yum install -y unzip > /dev/null 2>&1
          fi

          unzip "chromedriver_$PLATFORM.zip" > /dev/null 2>&1
          rm -rf "chromedriver_$PLATFORM.zip"

          $SUDO mv chromedriver /usr/local/bin
          $SUDO chmod +x /usr/local/bin/chromedriver

          # test/verify version
          if chromedriver --version | grep "$CHROMEDRIVER_VERSION" > /dev/null 2>&1; then
            echo "$(chromedriver --version) has been installed to $(which chromedriver)"
          else
            echo "Something went wrong; ChromeDriver could not be installed"
            exit 1
          fi
        name: Install ChromeDriver
    - run:
        name: Prepare Storybook
        command: npm run storybook:prepare
    - run:
        name: Applitools
        command: npx eyes-storybook
        no_output_timeout: 20m
  build-storybook:
    docker:
    - image: cimg/node:lts
    resource_class: medium+
    steps:
    - checkout
    - attach_workspace:
        at: workspace
    - run:
        name: Decompress design-tokens
        command: tar -xvf workspace/design-tokens.tar
    - run:
        command: |
          if [ ! -f "package.json" ]; then
            echo
            echo "---"
            echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
            echo "---"
            echo
            echo "Current directory: $(pwd)"
            echo
            echo
            echo "List directory: "
            echo
            ls
            exit 1
          fi
        name: Checking for package.json.
        working_directory: ~/project
    - restore_cache:
        keys:
        - node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
    - run:
        command: "if [[ ! -z \"\" ]]; then\n  echo \"Running override package installation command:\"\n  \nelse\n  npm ci\nfi\n"
        name: Installing NPM packages
        working_directory: ~/project
    - save_cache:
        key: node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
        paths:
        - ~/.npm
    - run:
        name: Build static Storybook
        command: npm run storybook:build
    - run:
        name: Archive static Storybook
        command: tar -czvf workspace/storybook.tar.gz .www/ Procfile config/nginx.conf.erb heroku-start.sh app.json
    - persist_to_workspace:
        root: workspace
        paths:
        - storybook.tar.gz
  framework-build:
    docker:
    - image: cimg/node:lts
    resource_class: xlarge
    steps:
    - checkout
    - attach_workspace:
        at: workspace
    - run:
        name: Decompress design-tokens
        command: tar -xvf workspace/design-tokens.tar
    - run:
        name: Decompress styles
        command: tar -xvf workspace/styles.tar
    - run:
        name: Decompress metadata
        command: tar -xvf workspace/metadata.tar
    - run:
        command: |
          if [ ! -f "package.json" ]; then
            echo
            echo "---"
            echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
            echo "---"
            echo
            echo "Current directory: $(pwd)"
            echo
            echo
            echo "List directory: "
            echo
            ls
            exit 1
          fi
        name: Checking for package.json.
        working_directory: ~/project
    - restore_cache:
        keys:
        - node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
    - run:
        command: "if [[ ! -z \"\" ]]; then\n  echo \"Running override package installation command:\"\n  \nelse\n  npm ci\nfi\n"
        name: Installing NPM packages
        working_directory: ~/project
    - save_cache:
        key: node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
        paths:
        - ~/.npm
    - run:
        name: Do build-dist
        command: npm run build-dist
    - run:
        name: Compress .dist
        command: |
          tar -cvf workspace/design-system-dist.tar .dist/
          cd .dist && zip -r dist . && mv dist.zip ../workspace/ && cd ..
    - run:
        command: |
          AWS_VER_REGEXP_2='aws-cli\/2.\d*.\d*'
          AWS_VER_REGEXP_1='aws-cli\/1.\d*.\d*'
          # initialize installed version to zero, to signify not installed (Or we want to ignore the installed version and re-install).
          AWS_CLI_INSTALLED_VERSION="0"
          AWS_CLI_VERSION_SELECTED="2"

          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          if [ "false" == "false" ]; then
              if ! command -v aws --version >/dev/null 2>&1  ; then
                  echo AWS is not installed
              else
                  echo AWS is currently installed.
                  if aws --version 2>&1 | grep -q $AWS_VER_REGEXP_2; then
                      echo AWS CLI v2 is installed
                      AWS_CLI_INSTALLED_VERSION="2"
                  fi
                  if aws --version 2>&1 | grep -q $AWS_VER_REGEXP_1; then
                      echo AWS CLI v1 is installed
                      AWS_CLI_INSTALLED_VERSION="1"
                  fi
              fi
          else
              echo "Skipping version check. Installing CLI"
          fi

          AWS_V2_UPDATE_PARAM=""
          if aws --version 2>&1 | grep -q $AWS_VER_REGEXP_2; then
              AWS_V2_UPDATE_PARAM="--update"
          fi

          #If the desired version of the CLI is not installed, install it.
          if [[ $AWS_CLI_VERSION_SELECTED != $AWS_CLI_INSTALLED_VERSION ]]; then

              #uninstall AWS CLI if it is installed.
              if which aws; then
                  echo Uninstalling old CLI
                  $SUDO rm -rf $(which aws)
              fi
              case $AWS_CLI_VERSION_SELECTED in
                  "1")
                      if ! command -v python >/dev/null 2>&1 && ! command -v python3 >/dev/null 2>&1 ; then
                          echo "Your environment does not seem to have Python installed, a requirement of the AWS CLI."
                          echo "Please either utilize the AWS CLI v2, or select an envionment with Python installed."
                          echo "Recommended image: cimg:/python:3.8"
                          exit 1
                      fi
                      # install CLI v1
                      export PIP=$(which pip pip3 | head -1)
                      if [[ -n $PIP ]]; then
                          if which sudo > /dev/null; then
                              sudo $PIP install awscli --upgrade
                          else
                              # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
                              $PIP install awscli --upgrade --user
                          fi
                      elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
                          cd
                          curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
                          unzip awscli-bundle.zip
                          if which sudo > /dev/null; then
                              sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
                          else
                              # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
                              awscli-bundle/install -b ~/bin/aws
                          fi
                          rm -rf awscli-bundle*
                          cd -
                      else
                          echo "Unable to install AWS CLI. Please install pip."
                          exit 1
                      fi
                      # Installation check
                      if aws --version &> grep -q "aws-cli/1"; then
                          echo "AWS CLI V1 has been installed successfully"
                          exit 0
                      else
                          echo "There was an issue installing the AWS CLI V1. Exiting."
                          exit 1
                      fi
                  ;;
                  "2")
                      # install CLI v2

                      cd /tmp || exit

                      # PLATFORM CHECK: mac vs. alpine vs. other linux
                      if uname -a | grep Darwin; then
                          SYS_ENV_PLATFORM=darwin
                      elif uname -a | grep Linux; then
                          SYS_ENV_PLATFORM=linux
                      else
                          echo "This platform appears to be unsupported."
                          uname -a
                          exit 1
                      fi

                      case $SYS_ENV_PLATFORM in
                          linux)
                              curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                              unzip awscliv2.zip
                              $SUDO ./aws/install $AWS_V2_UPDATE_PARAM
                              rm awscliv2.zip
                              ;;
                          darwin)
                              curl -sSL "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
                              $SUDO installer -pkg AWSCLIV2.pkg -target /
                              rm AWSCLIV2.pkg
                              ;;
                          *)
                              echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                              echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                              exit 1
                          ;;
                      esac
                      # Installation check
                      if aws --version &> grep -q "aws-cli/2"; then
                          echo "AWS CLI V2 has been installed successfully"
                          exit 0
                      else
                          echo "There was an issue installing the AWS CLI V2. Exiting."
                          exit 1
                      fi
                  ;;
              esac

          else
              echo "The v${AWS_CLI_VERSION_SELECTED} AWS CLI is already installed."
              exit 0
          fi
        name: Install AWS CLI v2
    - run:
        command: |
          if [ -z "${AWS_PAGER}" ]; then
            echo 'export AWS_PAGER=""' >> $BASH_ENV
            echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
            echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
          fi
        name: Disable AWS pager if not already configured
    - run:
        command: |
          aws configure set aws_access_key_id \
            $AWS_ACCESS_KEY_ID \
            --profile default
        name: Configure AWS Access Key ID
    - run:
        command: |
          aws configure set aws_secret_access_key \
            $AWS_SECRET_ACCESS_KEY \
            --profile default
        name: Configure AWS Secret Access Key
    - run:
        command: |
          aws configure set default.region $AWS_REGION \
            --profile default
        name: Configure AWS default region
    - run:
        command: aws s3 cp workspace/dist.zip s3://sldsbuilds/design-system/${CIRCLE_SHA1}/
        name: S3 Copy workspace/dist.zip -> s3://sldsbuilds/design-system/${CIRCLE_SHA1}/
    - persist_to_workspace:
        root: workspace
        paths:
        - design-system-dist.tar
        - dist.zip
  publish-site:
    docker:
    - image: cimg/node:lts
    resource_class: small
    steps:
    - add_ssh_keys:
        fingerprints:
        - 20:aa:56:b6:f4:c9:f7:b9:9e:04:24:61:0c:b0:80:65
    - run:
        name: Checkout design-system-site
        command: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git clone git@github.com:salesforce-ux/design-system-site.git .
    - attach_workspace:
        at: workspace
    - run:
        name: Decompress SLDS .dist
        command: |
          mkdir -p .slds
          tar -xvf workspace/design-system-dist.tar --directory .slds
    - run:
        command: |
          if [ ! -f "package.json" ]; then
            echo
            echo "---"
            echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
            echo "---"
            echo
            echo "Current directory: $(pwd)"
            echo
            echo
            echo "List directory: "
            echo
            ls
            exit 1
          fi
        name: Checking for package.json.
        working_directory: ~/project
    - restore_cache:
        keys:
        - node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
    - run:
        command: "if [[ ! -z \"\" ]]; then\n  echo \"Running override package installation command:\"\n  \nelse\n  npm ci\nfi\n"
        name: Installing NPM packages
        working_directory: ~/project
    - save_cache:
        key: node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
        paths:
        - ~/.npm
    - run:
        name: Build static site
        command: npm run build
        environment:
          SLDS__FRAMEWORK__PATH: .slds/.dist/
    - run:
        command: |
          if [[ $(command -v heroku) == "" ]]; then
            curl https://cli-assets.heroku.com/install.sh | sh
          else
            echo "Heroku is already installed. No operation was performed."
          fi
        name: Install Heroku CLI (If not installed)
    - run:
        name: Install Heroku Build CLI plugin
        command: heroku plugins:install heroku-builds
    - run:
        name: Generate site tarball
        command: |
          tar -czvf site-next.tar.gz .www/ Procfile config/nginx.conf.erb heroku-start.sh app.json
    - run:
        name: Deploy to Heroku app
        command: |
          export HEROKU_APP_NAME=$(cat workspace/heroku-app-name.txt)
          echo "=============================="
          echo ${HEROKU_APP_NAME}
          echo "=============================="
          heroku buildpacks -a ${HEROKU_APP_NAME} | grep "https://github.com/salesforce-ux/heroku-buildpack-nginx.git#dse" || heroku buildpacks:set https://github.com/salesforce-ux/heroku-buildpack-nginx.git#dse -a ${HEROKU_APP_NAME}
          heroku builds:create --source-tar site-next.tar.gz -a ${HEROKU_APP_NAME}
    - run:
        name: Install Github CLI
        command: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          sudo apt-add-repository https://cli.github.com/packages
          sudo apt update
          sudo apt install gh
    - run:
        name: Set Github deployments to "success"
        command: |
          for row in $(jq -r '.[] | select(.url | contains("review-site")) | @base64' workspace/gh-deployments.json); do
            export STATUS_URL=$(echo ${row} | base64 --decode | jq -r ".status" | sed 's/https:\/\/api.github.com//')
            export SITE_URL=$(echo ${row} | base64 --decode | jq -r ".url")
            gh api ${STATUS_URL} -f state=success -f environment_url=${SITE_URL} -H "Accept: application/vnd.github.ant-man-preview+json"
          done
  populate-database:
    docker:
    - image: cimg/node:lts
    resource_class: small
    steps:
    - checkout
    - run:
        name: Trigger database update via API
        command: |
          export VERSION_FROM_TAG=$([[ ${CIRCLE_TAG} =~ ^v.* ]] && echo ${CIRCLE_TAG:1:20} || echo ${CIRCLE_TAG})
          export SALESFORCE_VERSION=$(cat package.json | jq -r .slds.id)
          export VERSION_FROM_PACKAGE=$(cat package.json | jq -r .version)
          curl --location --request PATCH 'https://api.lightningdesignsystem.com/v1/release' \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${DSE_API_RELEASE_TOKEN}' \
          --data-raw '{
              "sha": "'"$CIRCLE_SHA1"'",
              "version":"'"$VERSION_FROM_TAG"'",
              "salesforce_version": "'"$SALESFORCE_VERSION"'"
          }'
  vrt-legacy:
    docker:
    - image: cimg/node:lts
    resource_class: large
    steps:
    - checkout
    - attach_workspace:
        at: workspace
    - run:
        name: Set environment variables
        command: |
          echo 'export PR_NUMBER=$(cat workspace/gh-pr-num.txt)' >> $BASH_ENV
          echo 'export APPLITOOLS_BATCH_ID=${CIRCLE_SHA1}' >> $BASH_ENV
          echo 'export APPLITOOLS_BATCH_NAME="PR #${PR_NUMBER} (${CIRCLE_USERNAME})"' >> $BASH_ENV
          echo 'export APPLITOOLS_DONT_CLOSE_BATCHES="true"' >> $BASH_ENV
          echo 'export APPLITOOLS_BATCH_NOTIFY="true"' >> $BASH_ENV
          echo 'export REVIEW_APP_NAME=slds-storybook-pr-${PR_NUMBER}' >> $BASH_ENV
    - run:
        name: Add Applitools eyes-storybook module
        command: npm i @applitools/eyes-storybook@latest --save-dev --package-lock-only
    - run:
        command: |
          if [ ! -f "package.json" ]; then
            echo
            echo "---"
            echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
            echo "---"
            echo
            echo "Current directory: $(pwd)"
            echo
            echo
            echo "List directory: "
            echo
            ls
            exit 1
          fi
        name: Checking for package.json.
        working_directory: ~/project
    - restore_cache:
        keys:
        - node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
    - run:
        command: "if [[ ! -z \"\" ]]; then\n  echo \"Running override package installation command:\"\n  \nelse\n  npm ci\nfi\n"
        name: Installing NPM packages
        working_directory: ~/project
    - save_cache:
        key: node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
        paths:
        - ~/.npm
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          # installation check
          if uname -a | grep Darwin > /dev/null 2>&1; then
            if ls /Applications | grep "Google Chrome" > /dev/null 2>&1; then

              echo "$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)is already installed"

              exit 0
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
            if command -v chromium-browser > /dev/null 2>&1; then

              echo "$(chromium-browser --version)is already installed to $(which chromium-browser)"

              exit 0

            else
              echo "Google Chrome (via Chromium) is not currently installed; installing it"
            fi
          elif command -v yum > /dev/null 2>&1; then
            if command -v google-chrome > /dev/null 2>&1; then
              echo "$(google-chrome --version)is already installed to $(which google-chrome)"

              exit 0
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          else
            if command -v google-chrome > /dev/null 2>&1; then

              echo "$(google-chrome --version)is already installed to $(which google-chrome)"

              exit 0
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          fi

          # install chrome
          if uname -a | grep Darwin > /dev/null 2>&1; then
            brew update > /dev/null 2>&1 && \
              HOMEBREW_NO_AUTO_UPDATE=1 brew cask install google-chrome > /dev/null 2>&1

            echo -e "#\!/bin/bash\n" > google-chrome
            perl -i -pe "s|#\\\|#|g" google-chrome
            echo -e "/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome \"\$@\"" >> google-chrome

            $SUDO mv google-chrome /usr/local/bin
            $SUDO chmod +x /usr/local/bin/google-chrome

            # test/verify installation
            if google-chrome --version > /dev/null 2>&1; then
              echo "$(google-chrome --version)has been installed in the /Applications directory"
              echo "A shortcut has also been created at $(which google-chrome)"
              exit 0
            else
              echo "Something went wrong; Google Chrome could not be installed"
              exit 1
            fi
          elif command -v yum > /dev/null 2>&1; then
            # download chrome
            curl --silent --show-error --location --fail --retry 3 \
              --output google-chrome-stable_current_x86_64.rpm \
              https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm

            curl --silent --show-error --location --fail --retry 3 \
              --output liberation-fonts.rpm \
              http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm

            $SUDO yum localinstall -y liberation-fonts.rpm \
              > /dev/null 2>&1

            $SUDO yum localinstall -y google-chrome-stable_current_x86_64.rpm \
              > /dev/null 2>&1

            rm -rf google-chrome-stable_current_x86_64.rpm liberation-fonts.rpm
          else
            # download chrome
            curl --silent --show-error --location --fail --retry 3 \
              --output google-chrome-stable_current_amd64.deb \
              https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

            $SUDO apt-get update \
            > /dev/null 2>&1 && \
            $SUDO apt-get install -y \
              apt-utils \
              fonts-liberation \
              libappindicator3-1 \
              libasound2 \
              libatk-bridge2.0-0 \
              libatk1.0-0 \
              libatspi2.0-0 \
              libcairo2 \
              libcups2 \
              libdbus-1-3 \
              libgbm1 \
              libgdk-pixbuf2.0-0 \
              libglib2.0-0 \
              libgtk-3-0 \
              libnspr4 \
              libnss3 \
              libpango-1.0-0 \
              libpangocairo-1.0-0 \
              libxcomposite1 \
              libxcursor1 \
              libxi6 \
              libxrandr2 \
              libxrender1 \
              libxss1 \
              libxtst6 \
              lsb-release \
              xdg-utils \
              > /dev/null 2>&1

            # setup chrome installation
            $SUDO dpkg -i \
              google-chrome-stable_current_amd64.deb \
              > /dev/null 2>&1

            rm -rf google-chrome-stable_current_amd64.deb
          fi

          # test/verify installation
          if google-chrome --version > /dev/null 2>&1; then
            echo "$(google-chrome --version) has been installed to $(which google-chrome)"
          else
            echo "Something went wrong; Google Chrome could not be installed"
            exit 1
          fi
        name: Install Google Chrome
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
          # determine_chrome_version
          if uname -a | grep Darwin> /dev/null 2>&1; then
            echo "System detected as MacOS"
            CHROME_VERSION="$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)"
            PLATFORM=mac64

          elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
            apk update > /dev/null 2>&1 && \
              apk add --no-cache chromium-chromedriver > /dev/null

            # verify version
            echo "$(chromedriver --version) has been installed to $(which chromedriver)"

            exit 0
          else
            CHROME_VERSION="$(google-chrome --version)"
            PLATFORM=linux64
          fi

          CHROME_VERSION_STRING="$(echo $CHROME_VERSION | sed 's/^Google Chrome //' | sed 's/^Chromium //')"

          # print Chrome version
          echo "Installed version of Google Chrome is $CHROME_VERSION_STRING"

          # determine chromedriver release
          CHROMEDRIVER_RELEASE="${CHROME_VERSION_STRING%%.*}"

          let CHROME_RELEASE=$CHROMEDRIVER_RELEASE

          if [[ $CHROME_RELEASE -lt 70 ]]; then
            # https://sites.google.com/a/chromium.org/chromedriver/downloads
            # https://chromedriver.storage.googleapis.com/2.40/notes.txt

            case $CHROME_RELEASE in
            69)
              CHROMEDRIVER_VERSION="2.44";;
            68)
              CHROMEDRIVER_VERSION="2.42";;
            67)
              CHROMEDRIVER_VERSION="2.41";;
            66)
              CHROMEDRIVER_VERSION="2.40";;
            65)
              CHROMEDRIVER_VERSION="2.38";;
            64)
              CHROMEDRIVER_VERSION="2.37";;
            63)
              CHROMEDRIVER_VERSION="2.36";;
            62)
              CHROMEDRIVER_VERSION="2.35";;
            61)
              CHROMEDRIVER_VERSION="2.34";;
            60)
              CHROMEDRIVER_VERSION="2.33";;
            59)
              CHROMEDRIVER_VERSION="2.32";;
            58)
              CHROMEDRIVER_VERSION="2.31";;
            [56-57])
              CHROMEDRIVER_VERSION="2.29";;
            55)
              CHROMEDRIVER_VERSION="2.28";;
            54)
              CHROMEDRIVER_VERSION="2.27";;
            53)
              CHROMEDRIVER_VERSION="2.26";;
            52)
              CHROMEDRIVER_VERSION="2.24";;
            51)
              CHROMEDRIVER_VERSION="2.23";;
            [49-50])
              CHROMEDRIVER_VERSION="2.22";;
            [46-48])
              CHROMEDRIVER_VERSION="2.21";;
            [43-45])
              CHROMEDRIVER_VERSION="2.20";;
            *)
              echo "Sorry, Google Chrome/Chromium version 43 or newer is required to use ChromeDriver"
              exit 1;;
            esac
          else
            CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 3 \
              "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROMEDRIVER_RELEASE")
          fi

          # installation check
          if command -v chromedriver > /dev/null 2>&1; then
            if chromedriver --version | grep "$CHROMEDRIVER_VERSION" > /dev/null 2>&1; then
              echo "ChromeDriver $CHROMEDRIVER_VERSION is already installed"
              exit 0
            else
              echo "A different version of ChromeDriver is installed ($(chromedriver --version)); removing it"
              $SUDO rm -f $(command -v chromedriver)
            fi
          fi

          echo "ChromeDriver $CHROMEDRIVER_VERSION will be installed"

          # download chromedriver
          curl --silent --show-error --location --fail --retry 3 \
            --output chromedriver_$PLATFORM.zip \
            "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_$PLATFORM.zip"

          # setup chromedriver installation
          if command -v yum > /dev/null 2>&1; then
            yum install -y unzip > /dev/null 2>&1
          fi

          unzip "chromedriver_$PLATFORM.zip" > /dev/null 2>&1
          rm -rf "chromedriver_$PLATFORM.zip"

          $SUDO mv chromedriver /usr/local/bin
          $SUDO chmod +x /usr/local/bin/chromedriver

          # test/verify version
          if chromedriver --version | grep "$CHROMEDRIVER_VERSION" > /dev/null 2>&1; then
            echo "$(chromedriver --version) has been installed to $(which chromedriver)"
          else
            echo "Something went wrong; ChromeDriver could not be installed"
            exit 1
          fi
        name: Install ChromeDriver
    - run:
        name: Prepare Storybook
        command: npm run storybook:prepare
    - run:
        name: Applitools (legacy)
        command: STORYBOOK_SLDS_VERSION=legacy npx eyes-storybook --conf applitools.legacy.config.js
        no_output_timeout: 20m
  vrt-close:
    docker:
    - image: cimg/node:lts
    resource_class: small
    steps:
    - run:
        name: 'Applitools: close batch'
        command: |
          export GITHUB_SERVER=github.com
          url="https://salesforceuxeyesapi.applitools.com/api/externals/github/servers/${GITHUB_SERVER}/commit/${CIRCLE_SHA1}/complete?apiKey=${APPLITOOLS_API_KEY}"
          curl -X POST $url -H "Content-Type: application/json" --data "{'serverId': '${GITHUB_SERVER}', 'commitSha': '${CIRCLE_SHA1}'}" -v -L
  prepare:
    docker:
    - image: cimg/node:lts
    resource_class: small
    steps:
    - checkout
    - run:
        command: mkdir -p workspace
    - run:
        name: Install Github CLI
        command: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          sudo apt-add-repository https://cli.github.com/packages
          sudo apt update
          sudo apt install gh
    - run:
        name: Retrieve Github deployments
        command: |
          gh api /repos/salesforce-ux/design-system-internal/deployments --field ref=${CIRCLE_SHA1} --method GET | jq "map({ status: .statuses_url, url: .payload.web_url})" > workspace/gh-deployments.json
    - run:
        name: Set Github deployments to "in progress"
        command: |
          for row in $(jq -r '.[] | @base64' workspace/gh-deployments.json); do
            export STATUS_URL=$(echo ${row} | base64 --decode | jq -r ".status" | sed 's/https:\/\/api.github.com//')
            gh api ${STATUS_URL} -f state=in_progress -H "Accept: application/vnd.github.flash-preview+json"
          done
    - run:
        name: Get Github pull-request number
        command: |
          gh api /repos/salesforce-ux/design-system-internal/commits/${CIRCLE_SHA1}/pulls -H "Accept: application/vnd.github.groot-preview+json" | jq -r '.[].number' > workspace/gh-pr-num.txt
          echo 'export PR_NUMBER=$(cat workspace/gh-pr-num.txt)' >> $BASH_ENV
    - run:
        name: Set which app to deploy to on Heroku
        command: |
          export CURRENT_DEFAULT_BRANCH=`git remote show origin | grep "HEAD branch" | cut -d ":" -f 2 | xargs`
          echo 'export HEROKU_RELEASE_STORYBOOK_APP_NAME=false' >> $BASH_ENV
          if [[ "${CIRCLE_BRANCH}" = "${CURRENT_DEFAULT_BRANCH}" ]] ; then
            echo "Publishing to UPCOMING..."
            echo 'export HEROKU_APP_NAME=${HEROKU_APP_UPCOMING}' >> $BASH_ENV
          elif [[ ${CIRCLE_TAG} =~ ^v[0-9]+\.[0-9]+\.[0-9]+-.+$ ]] ; then
            echo "Publishing to CORE-MAIN..."
            echo 'export HEROKU_APP_NAME=${HEROKU_APP_CORE_MAIN}' >> $BASH_ENV
          elif [[ ${CIRCLE_TAG} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then
            echo "Publishing to CORE-PATCH..."
            echo 'export HEROKU_APP_NAME=${HEROKU_APP_CORE_PATCH}' >> $BASH_ENV
          else
            echo "Publishing to pull-request review app..."
            echo 'export HEROKU_APP_NAME=slds-review-site-pr-${PR_NUMBER}' >> $BASH_ENV
            echo 'export HEROKU_RELEASE_STORYBOOK_APP_NAME=true' >> $BASH_ENV
          fi
          echo 'export HEROKU_RELEASE_STORYBOOK_APP_NAME=${HEROKU_APP_NAME}' >> $BASH_ENV
          source $BASH_ENV
          echo $HEROKU_APP_NAME > workspace/heroku-app-name.txt
          echo $HEROKU_RELEASE_STORYBOOK_APP_NAME > workspace/heroku-release-storybook-app-name.txt
    - run:
        name: Show HEROKU_APP_NAME value
        command: |
          echo
          echo "PR_NUMBER = ${PR_NUMBER}"
          echo
          echo "=============================="
          cat workspace/heroku-app-name.txt
          echo "=============================="
          echo
    - run:
        command: |
          if [ ! -f "package.json" ]; then
            echo
            echo "---"
            echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
            echo "---"
            echo
            echo "Current directory: $(pwd)"
            echo
            echo
            echo "List directory: "
            echo
            ls
            exit 1
          fi
        name: Checking for package.json.
        working_directory: ~/project
    - restore_cache:
        keys:
        - node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
    - run:
        command: "if [[ ! -z \"\" ]]; then\n  echo \"Running override package installation command:\"\n  \nelse\n  npm ci\nfi\n"
        name: Installing NPM packages
        working_directory: ~/project
    - save_cache:
        key: node-deps-v1-{{ .Branch }}-{{ checksum "~/project/package-lock.json" }}
        paths:
        - ~/.npm
    - run:
        name: Build Tokens
        command: npm run gulp -- generate:tokens:all
    - run:
        name: Compress design-tokens
        command: tar -cvf workspace/design-tokens.tar design-tokens/
    - run:
        name: Compile styles
        command: npm run gulp -- styles
    - run:
        name: Compress styles
        command: tar -cvf workspace/styles.tar assets/styles/
    - run:
        name: Compress generated metadata
        command: tar -cvf workspace/metadata.tar .generated/metadata/
    - persist_to_workspace:
        root: workspace
        paths:
        - design-tokens.tar
        - styles.tar
        - metadata.tar
        - heroku-app-name.txt
        - heroku-release-storybook-app-name.txt
        - gh-deployments.json
        - gh-pr-num.txt
workflows:
  version: 2
  CI:
    jobs:
    - prepare:
        filters:
          tags:
            only: /.*/
        context: ux-eng-keys
    - build-storybook:
        filters:
          tags:
            ignore: /^v\d+\.\d+\.\d+-.+$/
        requires:
        - prepare
        context: ux-eng-keys
    - publish-storybook:
        requires:
        - build-storybook
        context: ux-eng-keys
    - framework-build:
        filters:
          tags:
            only: /.*/
        requires:
        - prepare
        context: ux-eng-keys
    - publish-site:
        filters:
          tags:
            only: /.*/
        requires:
        - framework-build
        context: ux-eng-keys
    - populate-database:
        filters:
          tags:
            only: /^v\d+\.\d+\.\d+.*/
          branches:
            ignore: /.*/
        requires:
        - framework-build
        context: ux-eng-keys
    - vrt-desktop:
        filters:
          branches:
            ignore: /^\d{3}-(summer|spring|winter)-\d{2}$/
        context: ux-eng-keys
    - vrt-mobile:
        filters:
          branches:
            ignore: /^\d{3}-(summer|spring|winter)-\d{2}$/
        context: ux-eng-keys
    - vrt-legacy:
        filters:
          branches:
            ignore: /^\d{3}-(summer|spring|winter)-\d{2}$/
        context: ux-eng-keys
    - vrt-close:
        requires:
        - vrt-desktop
        - vrt-mobile
        - vrt-legacy
        context: ux-eng-keys
